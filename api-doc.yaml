swagger: '2.0'
info:
  description: |
    This is a sample Petstore server.  You can find 
    out more about Swagger at 
    [http://swagger.io](http://swagger.io) or on 
    [irc.freenode.net, #swagger](http://swagger.io/irc/).
  version: 1.0.0
  title: Swagger Petstore
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
# host: petstore.swagger.io
# basePath: /v2
tags:
- name: user
  description: Operations about user
  externalDocs:
    description: Find out more about our store
    url: http://swagger.io
# schemes:
# - http
paths:
  /user/info:
    get:
      tags:
      - user
      summary: Get user by token
      produces:
      - application/json
      parameters:
      - in: header
        name: Authorization
        description: JTW token received in log in
        type: string
        required: true
      responses:
        200:
          description: successful operation
          schema:
            type: object
            properties:
              username: 
                type: string
              firstname:
                type: string
              lastname:
                type: string
              email:
                type: string
        400:
          description: Invalid token provided
  /user/following:
    get:
      tags:
      - user
      summary: Get following user by token
      produces:
      - application/json
      parameters:
      - in: header
        name: Authorization
        description: JTW token received in log in
        type: string
        required: true
      responses:
        200:
          description: A list of userId followed by current user
          schema:
            type: object
            properties:
              followingIds:
                type: array
                items:
                  type: string
        400:
          description: Invalid username supplied
        401:
          description: Unauthorized
        404:
          description: User not found
  /user/follower:
    get:
      tags:
      - user
      summary: Get followers by token
      produces:
      - application/json
      parameters:
      - in: header
        name: Authorization
        description: JTW token received in log in
        type: string
        required: true
      responses:
        200:
          description: A list of userId following user
          schema:
            type: object
            properties:
              followerIds:
                type: array
                items:
                  type: string
        400:
          description: Invalid username supplied
        401:
          description: Unauthorized
        404:
          description: User not found
  /user/login:
    post:
      tags:
      - user
      summary: Login user with username and password
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: user information
        required: true
        schema:
          type: object
          properties:
            username:
              type: string
            password:
              type: string
      responses:
        200:
          description: token generated after successful operation
          schema:
            type: object
            properties:
              success:
                type: boolean
              token:
                type: string
        400:
          description: Bad Request
          schema:
            type: object
            properties:
              success:
                type: boolean
              error: 
                type: string
  /user/register:
    post:
      tags:
      - user
      summary: Register user with given email and password
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: user information
        required: true
        schema:
          $ref: '#/definitions/User'
          
      responses:
        200:
          description: successful operation
          schema:
            type: object
            properties:
              success:
                type: boolean
              user:
                $ref: '#/definitions/User'
        400:
          description: incomplete information
  /user/follow:
    post:
      tags:
      - user
      summary: Follow given userId
      produces:
      - application/json
      parameters:
      - in: header
        name: Authorization
        description: JTW token received in log in
        type: string
        required: true
      - in: body
        name: body
        description: UserId to be followed
        required: true
        schema:
          type: object
          properties:
            followId:
              type: string
      responses:
        200:
          description: successful operation
        401:
          description: unauthorized
        404:
          description: user not found
  /user/unfollow:
    post:
      tags:
      - user
      summary: Unfollow given userId
      produces:
      - application/json
      parameters:
      - in: header
        name: Authorization
        description: JTW token received in log in
        type: string
        required: true
      - in: body
        name: body
        description: UserId to be unfollowed
        required: true
        schema:
          type: object
          properties:
            unfollowId:
              type: string
      responses:
        200:
          description: successful operation
        401:
          description: unauthorized
        404:
          description: user not found
  /user/tweet:
    post:
      tags:
      - user
      summary: Post a new tweet
      produces:
      - application/json
      parameters:
      - in: header
        name: Authorization
        description: JTW token received in log in
        type: string
        required: true
      - in: body
        name: body
        description: tweet content
        required: true
        schema:
          type: object
          properties:
            content:
              type: string
      responses:
        200:
          description: successful operation
        401:
          description: unauthorized
        404:
          description: user not found
  /user/retweet:
    post:
      tags:
      - user
      summary: Retweet an existing tweet
      produces:
      - application/json
      parameters:
      - in: header
        name: Authorization
        description: JTW token received in log in
        type: string
        required: true
      - in: body
        name: body
        description: information about tweet to be retweeted
        required: true
        schema:
          type: object
          properties:
            tweetId:
              type: string
      responses:
        200:
          description: successful operation
        401:
          description: unauthorized
        404:
          description: tweet not found
  /user/comment:
    post:
      tags:
      - user
      summary: Comment on a tweet
      produces:
      - application/json
      parameters:
      - in: header
        name: Authorization
        description: JTW token received in log in
        type: string
        required: true
      - in: body
        name: body
        description: Comment content
        required: true
        schema:
          type: object
          properties:
            tweetId:
              type: string
            commentContent:
              type: string
      responses:
        200:
          description: successful operation
        401:
          description: unauthorized
        404:
          description: tweet not found
  /user/like:
    post:
      tags:
      - user
      summary: Like a tweet
      produces:
      - application/json
      parameters:
      - in: header
        name: Authorization
        description: JTW token received in log in
        type: string
        required: true
      - in: body
        name: body
        description: Information about tweet to be liked
        required: true
        schema:
          type: object
          properties:
            tweetId:
              type: string
      responses:
        200:
          description: successful operation
        401:
          description: unauthorized
        404:
          description: tweet not found
  /user/unlike:
    post:
      tags:
      - user
      summary: Unlike a tweet
      produces:
      - application/json
      parameters:
      - in: header
        name: Authorization
        description: JTW token received in log in
        type: string
        required: true
      - in: body
        name: body
        description: Information about tweet to be unliked
        required: true
        schema:
          type: object
          properties:
            tweetId:
              type: string
      responses:
        200:
          description: successful operation
        401:
          description: unauthorized
        404:
          description: tweet not found
  /user/startChat:
    post:
      tags:
      - user
      summary: Initialize a chat
      produces:
      - application/json
      parameters:
      - in: header
        name: Authorization
        description: JTW token received in log in
        type: string
        required: true
      - in: body
        name: body
        description: Object receiving message
        required: true
        schema:
          type: object
          properties:
            userId: 
              type: string
      responses:
        200:
          description: successful operation
        401:
          description: unauthorized
        404:
          description: chat not found
  /user/sendMessage:
    post:
      tags:
      - user
      summary: Send a message
      produces:
      - application/json
      parameters:
      - in: header
        name: Authorization
        description: JTW token received in log in
        type: string
        required: true
      - in: body
        name: body
        description: Message content
        required: true
        schema:
          type: object
          properties:
            chatId:
              type: string
            message:
              type: string
      responses:
        200:
          description: successful operation
        401:
          description: unauthorized
        404:
          description: chat not found
  /user/update:
    put:
      tags:
      - user
      summary: Update user information
      produces:
      - application/json
      parameters:
      - in: header
        name: Authorization
        description: JTW token received in log in
        type: string
        required: true
      - in: body
        name: body
        description: User information
        required: true
        schema:
          $ref: '#/definitions/FullUser'
      responses:
        200:
          description: successful operation
        400:
          description: Invalid username supplied
        401:
          description: Unauthorized
        404:
          description: User not found
          
          
securityDefinitions:
  petstore_auth:
    type: oauth2
    authorizationUrl: http://petstore.swagger.io/oauth/dialog
    flow: implicit
    scopes:
      write:pets: modify pets in your account
      read:pets: read your pets
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  User:
    type: object
    properties:
      username:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      email:
        type: string
      password:
        type: string
  FullUser:
    type: object
    properties:
      username:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      email:
        type: string
      password:
        type: string
      bio:
        type: string
      location:
        type: string
      website:
        type: string
      birthday:
        type: string
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /zmxzz/Twitter/1.0.0
schemes:
 - https
 - http